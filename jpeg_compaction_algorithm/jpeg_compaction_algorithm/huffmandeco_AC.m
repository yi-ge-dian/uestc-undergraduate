function AC_decode = huffmandeco_AC( ACH,n )
 T1={'1010' '00' '01' '100' '1011' '11010' '1111000' '11111000' '1111110110' '1111111110000010' '1111111110000011'; 
        '1100' '11011' '1111001' '111110110' '11111110110' '1111111110000100' '1111111110000101' '1111111110000110' '1111111110000111' '1111111110001000' '0'; 
        '11100' '11111001' '1111110111' '111111110100' '1111111110001001' '1111111110001010' '1111111110001011' '1111111110001100' '1111111110001101' '1111111110001110' '0'; 
        '111010' '111110111' '111111110101' '1111111110001111' '1111111110010000' '1111111110010001' '1111111110010010' '1111111110010011' '1111111110010100' '1111111110010101' '0'; 
        '111011' '1111111000' '1111111110010110' '1111111110010111' '1111111110011000' '1111111110011001' '1111111110011010' '1111111110011011' '1111111110011100' '1111111110011101' '0'; 
        '1111010' '11111110111' '1111111110011110' '1111111110011111' '1111111110100000' '1111111110100001' '1111111110100010' '1111111110100011' '1111111110100100' '1111111110100001' '0'; 
        '1111011' '111111110110' '1111111110100110' '1111111110100111' '1111111110101000' '1111111110101001' '1111111110101010' '1111111110101011' '1111111110101100' '1111111110101101' '0'; 
        '11111010' '111111110111' '1111111110101110' '1111111110101111' '1111111110110000' '1111111110110001' '1111111110110010' '1111111110110011' '1111111110110100' '1111111110110101' '0'; 
        '111111000' '111111111000000' '1111111110110110' '1111111110110111' '1111111110111000' '1111111110111001' '1111111110111010' '1111111110111011' '1111111110111100' '1111111110111101' '0'; 
        '111111001' '1111111110111110' '1111111110111111' '1111111111000000' '1111111111000001' '1111111111000010' '1111111111000011' '1111111111000100' '1111111111000101' '1111111111000110' '0'; 
        '111111010' '1111111111000111' '1111111111001000' '1111111111001001' '1111111111001010' '1111111111001011' '1111111111001100' '1111111111001101' '1111111111001110' '1111111111001111' '0'; 
        '1111111001' '1111111111010000' '1111111111010001' '1111111111010010' '1111111111010011' '1111111111010100' '1111111111010101' '1111111111010110' '1111111111010111' '1111111111011000' '0'; 
        '1111111010' '1111111111011001' '1111111111011010' '1111111111011011' '1111111111011100' '1111111111011101' '1111111111011110' '1111111111011111' '1111111111100000' '1111111111100001' '0'; 
        '11111111000' '1111111111100010' '1111111111100011' '1111111111100100' '1111111111100101' '1111111111100110' '1111111111100111' '1111111111101000' '1111111111101001' '1111111111101010' '0'; 
        '1111111111101011' '1111111111101100' '1111111111101101' '1111111111101110' '1111111111101111' '1111111111110000' '1111111111110001' '1111111111110010' '1111111111110011' '1111111111110100' '0'; 
        '11111111001' '1111111111110101' '1111111111110110' '1111111111110111' '1111111111111000' '1111111111111001' '1111111111111010' '1111111111111011' '1111111111111100' '1111111111111101' '1111111111111111'}; 
%色度AC系数码表     
T2={'00' '01' '100' '1010' '11000' '11001' '111000' '1111000' '111110100' '1111110110' '111111110100'; 
        '1011' '111001' '11110110' '111110101' '11111110110' '111111110101' '1111111110001000' '1111111110001001' '1111111110001010' '1111111110001011' '0'; 
        '11010' '11110111' '1111110111' '111111110110' '111111111000010' '1111111110001100' '1111111110001101' '1111111110001110' '1111111110001111' '1111111110010000' '0'; 
        '11011' '11111000' '11111111000' '11111111011' '1111111110010001' '1111111110010010' '1111111110010011' '1111111110010100' '1111111110010101' '1111111110010110' '0'; 
        '111010' '111110110' '1111111110010111' '1111111110011000' '1111111110011001' '1111111110011010' '1111111110011011' '1111111110011100' '1111111110011101' '1111111110011110' '0'; 
        '111011' '1111111001' '1111111110011111' '1111111110100000' '1111111110100001' '1111111110100010' '1111111110100011' '1111111110100100' '1111111110100101' '1111111110100010' '0'; 
        '1111001' '11111110111' '1111111110100111' '1111111110101000' '1111111110101001' '1111111110101010' '1111111110101011' '1111111110101100' '1111111110101101' '1111111110101110' '0'; 
        '1111010' '11111111000' '1111111110101111' '1111111110110000' '1111111110110001' '1111111110110010' '1111111110110011' '1111111110110100' '1111111110110101' '1111111110110110' '0'; 
        '11111001' '1111111110110111' '1111111110111000' '1111111110111001' '1111111110111010' '1111111110111011' '1111111110111100' '1111111110111101' '1111111110111110' '1111111110111111' '0'; 
        '111110111' '1111111111000000' '1111111111000001' '1111111111000010' '1111111111000011' '1111111111000100' '1111111111000101' '1111111111000110' '1111111111000111' '1111111111001000' '0'; 
        '111111000' '1111111111001001' '1111111111001010' '1111111111001011' '1111111111001100' '1111111111001101' '1111111111001110' '1111111111001111' '1111111111010000' '1111111111010001' '0'; 
        '111111001' '1111111111010010' '1111111111010011' '1111111111010100' '1111111111010101' '1111111111010110' '1111111111010111' '1111111111011000' '1111111111011001' '1111111111011010' '0'; 
        '111111010' '1111111111011011' '1111111111011100' '1111111111011101' '1111111111011110' '1111111111011111' '1111111111100000' '1111111111100001' '1111111111100010' '1111111111100011' '0'; 
        '11111111001' '1111111111100100' '1111111111100101' '1111111111100110' '1111111111100111' '1111111111101000' '1111111111101001' '1111111111101010' '1111111111101011' '1111111111101100' '0'; 
        '11111111100000' '1111111111101101' '1111111111101110' '1111111111101111' '1111111111110000' '1111111111110001' '1111111111110010' '1111111111110011' '1111111111110100' '1111111111110101' '0'; 
        '1111111010' '111111111000011' '1111111111110110' '1111111111110111' '1111111111111000' '1111111111111001' '1111111111111010' '1111111111111011' '1111111111111100' '1111111111111101' '1111111111111111'};    
    AC_decode=[];
    j=1;x=1;y=1;p=1;tmp=[];TMP=[];count=0;
if n==1
    while p<=length(ACH)
        for i=p+1:1:length(ACH)
            [x,y]=find(strcmp(T1,ACH(p:i)));%找到前缀码的位置
        if x~=0&y~=0
             break
        end
        end
        NNNN=x-1;
    if NNNN==0 | NNNN==15
      SSSS=y-1;
    else  
      SSSS=y;
    end 
        count=count+NNNN+1;
  if NNNN==0&SSSS==0
    tmp=zeros(1,64-count);
    break
  end
  if NNNN==15&SSSS==0
      tmp2=0;
      p=p+length(char(T1(x,y)))+1;
  else
      tmp1=ACH(length(char(T1(x,y)))+p:p-1+length(char(T1(x,y)))+SSSS);
     p=p+length(char(T1(x,y)))+SSSS;
    if tmp1(1)=='1'
      tmp2=bin2dec(tmp1);
    else
      for k=1:1:length(tmp1)
          if tmp1(k)=='0'
              tmp1(k)='1';
          else
              tmp1(k)='0';
          end
          tmp2=-bin2dec(tmp1);
      end
    end
  end
    TMP(1,j)=NNNN;
    TMP(1,j+1)=tmp2;
    j=j+2;
    end
    for q=1:2:length(TMP)
        if TMP(1,q)==15&TMP(1,q+1)==0
          AC_decode=[AC_decode zeros(1,16)];
        end
        AC_decode=[AC_decode zeros(1,TMP(1,q)) TMP(1,q+1)];
    end
    AC_decode=[AC_decode tmp];
else
    while p<=length(ACH)
        for i=p+1:1:length(ACH)
            [x,y]=find(strcmp(T2,ACH(p:i)));%找到前缀码的位置
        if x~=0&y~=0
             break
        end
        end
        NNNN=x-1;
    if NNNN==0 | NNNN==15
      SSSS=y-1;
    else  
      SSSS=y;
    end 
        count=count+NNNN+1;
  if NNNN==0&SSSS==0
    tmp=zeros(1,64-count);
    break
  end
  if NNNN==15&SSSS==0
      tmp2=0;
      p=p+length(char(T2(x,y)))+1;
  else
      tmp1=ACH(length(char(T2(x,y)))+p:p-1+length(char(T2(x,y)))+SSSS);
     p=p+length(char(T2(x,y)))+SSSS;
    if tmp1(1)=='1'
      tmp2=bin2dec(tmp1);
    else
      for k=1:1:length(tmp1)
          if tmp1(k)=='0'
              tmp1(k)='1';
          else
              tmp1(k)='0';
          end
          tmp2=-bin2dec(tmp1);
      end
    end
  end
    TMP(1,j)=NNNN;
    TMP(1,j+1)=tmp2;
    j=j+2;
    end
    for q=1:2:length(TMP)
        if TMP(1,q)==15&TMP(1,q+1)==0
          AC_decode=[AC_decode zeros(1,16)];
        end
        AC_decode=[AC_decode zeros(1,TMP(1,q)) TMP(1,q+1)];
    end
    AC_decode=[AC_decode tmp];
end
end


   

